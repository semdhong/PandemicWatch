
@page "/personmap/{personId:int}"
@inject HttpClient http
@inject NavigationManager navmgr
@using System.Threading;
<h3>Contact Tracing @Count</h3>

<div class="pg-orgchart">
    <div class="org-chart">
        <ul>
            <li>
                <!--Positive Person-->
                <div class="user">
                    <RadzenImage Path="css/images/person.png" Style="width:100px;" />
                    <div class="name">@principalpersonsmodel.Fullname</div>
                    @switch (principalpersonsmodel.PersonStatus)
                    {
                        case "P":
                            <h4 class="badge badge-danger">Positive</h4>
                            break;
                        case "N":
                            <h4 class="badge badge-success">Negative</h4>
                            break;
                        case "D":
                            <h4 class="badge badge-warning">PUI</h4>
                            break;
                        case "S":
                            <h4 class="badge badge-secondary">PUM</h4>
                            break;
                        default:
                            <h4 class="badge badge-dark">Unknown</h4>
                            break;

                    }
                    <Radzen.Blazor.RadzenLabel>Confirmed COVID-19 Positive</Radzen.Blazor.RadzenLabel>

                </div>
                @if (contactpersonsmodel != null)
                {

                    <ul>
                        @foreach (var direct in contactpersonsmodel)
                        {

                            GetSecondLevel(direct.Id);
                            <li>
                                <div class="user">

                                    <RadzenImage Path="css/images/person.png" Style="width:100px;" />
                                    <div class="name">@direct.Fullname</div>
                                    @switch (direct.PersonStatus)
                                    {
                                        case "P":
                                            <h4 class="badge badge-danger">Positive</h4>
                                            break;
                                        case "N":
                                            <h4 class="badge badge-success">Negative</h4>
                                            break;
                                        case "D":
                                            <h4 class="badge badge-warning">PUI</h4>
                                            break;
                                        case "S":
                                            <h4 class="badge badge-secondary">PUM</h4>
                                            break;
                                        default:
                                            <h4 class="badge badge-dark">Unknown</h4>
                                            break;

                                    }


                                </div>
                              
                                <ul>
                                    @if (secondperson != null)
                                    {   
                                        <li>
                                            <div class="user">
                                                <a href="/personmap/@secondperson.Id">
                                                    <RadzenImage Path="css/images/person.png" Style="width:100px;" />
                                                    <b>@secondperson.Fullname</b>
                                                    @switch (secondperson.PersonStatus)
                                                    {
                                                        case "P":
                                                            <h4 class="badge badge-danger">Positive</h4>
                                                            break;
                                                        case "N":
                                                            <h4 class="badge badge-success">Negative</h4>
                                                            break;
                                                        case "D":
                                                            <h4 class="badge badge-warning">PUI</h4>
                                                            break;
                                                        case "S":
                                                            <h4 class="badge badge-secondary">PUM</h4>
                                                            break;
                                                        default:
                                                            <h4 class="badge badge-dark">Unknown</h4>
                                                            break;

                                                    }
                                                </a>

                                            </div>
                                        </li>
                                    }
                                </ul>
                            </li>

                        }
                    </ul>
                }
            </li>
        </ul>
    </div>
</div>
@code{
    [Parameter] public int personId { get; set; }
    List<PersonProfilesModel> contactpersonsmodel = new List<PersonProfilesModel>();
    PersonProfilesModel principalpersonsmodel = new PersonProfilesModel();
    PersonProfilesModel secondperson = new PersonProfilesModel();
    List<PersonProfilesModel> allpersonsmodel = new List<PersonProfilesModel>();
    public int Count { get; set; }
    BroadcastHub hub = new BroadcastHub();

    protected async override Task OnInitializedAsync()
    {
        contactpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Contacts/" + personId);
        principalpersonsmodel = await http.GetJsonAsync<PersonProfilesModel>($"https://pegasusapiadmin.azurewebsites.net/api/Person/" + personId);
        allpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Person/");
        StartCountdown();
    }

    //protected async override Task OnParametersSetAsync()
    //{

    //    contactpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Contacts/" + personId);
    //    principalpersonsmodel = await http.GetJsonAsync<PersonProfilesModel>($"https://pegasusapiadmin.azurewebsites.net/api/Person/" + personId);
    //    allpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Person/");
    //    StartCountdown();
    //}
    async Task ReloadData()
    {
        contactpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Contacts/" + personId);
        principalpersonsmodel = await http.GetJsonAsync<PersonProfilesModel>($"https://pegasusapiadmin.azurewebsites.net/api/Person/" + personId);
        allpersonsmodel = await http.GetJsonAsync<List<PersonProfilesModel>>($"https://pegasusapiadmin.azurewebsites.net/api/Person/");
    }

    void GetSecondLevel(int id)
    {
        secondperson = allpersonsmodel.FirstOrDefault(x => x.PrincipalPersonId == id);
    }
    
    void StartCountdown()
    { var dc = new List<PersonProfilesModel>();
      
        var timer = new Timer(new TimerCallback(_ =>
        {

            Count++;
            var task = Task.Run(async () => await ReloadData());
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
            {
              
                StateHasChanged();
            });

        }), null, 1000, 1000);
      

    }
}